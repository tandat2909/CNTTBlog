diff --git a/vendor/laravel-admin-ext/media-manager/src/MediaManager.php b/vendor/laravel-admin-ext/media-manager/src/MediaManager.php
index 392e264..b9b2e5e 100644
--- a/vendor/laravel-admin-ext/media-manager/src/MediaManager.php
+++ b/vendor/laravel-admin-ext/media-manager/src/MediaManager.php
@@ -4,10 +4,12 @@
 
 use Encore\Admin\Exception\Handler;
 use Encore\Admin\Extension;
+use Illuminate\Filesystem\FilesystemAdapter;
 use Illuminate\Http\UploadedFile;
+use Illuminate\Support\Collection;
 use Illuminate\Support\Facades\File;
 use Illuminate\Support\Facades\Storage;
-use League\Flysystem\Adapter\Local;
+use League\Flysystem\Local\LocalFilesystemAdapter;
 
 /**
  * Class MediaManager.
@@ -22,28 +24,21 @@ class MediaManager extends Extension
     protected $path = '/';
 
     /**
-     * @var \Illuminate\Filesystem\FilesystemAdapter
+     * @var FilesystemAdapter
      */
     protected $storage;
 
-    /**
-     * List of allowed extensions.
-     *
-     * @var string
-     */
-    protected $allowed = [];
-
     /**
      * @var array
      */
     protected $fileTypes = [
         'image' => 'png|jpg|jpeg|tmp|gif',
-        'word'  => 'doc|docx',
-        'ppt'   => 'ppt|pptx',
-        'pdf'   => 'pdf',
-        'code'  => 'php|js|java|python|ruby|go|c|cpp|sql|m|h|json|html|aspx',
-        'zip'   => 'zip|tar\.gz|rar|rpm',
-        'txt'   => 'txt|pac|log|md',
+        'word' => 'doc|docx',
+        'ppt' => 'ppt|pptx',
+        'pdf' => 'pdf',
+        'code' => 'php|js|java|python|ruby|go|c|cpp|sql|m|h|json|html|aspx',
+        'zip' => 'zip|tar\.gz|rar|rpm',
+        'txt' => 'txt|pac|log|md',
         'audio' => 'mp3|wav|flac|3pg|aa|aac|ape|au|m4a|mpc|ogg',
         'video' => 'mkv|rmvb|flv|mp4|avi|wmv|rm|asf|mpeg',
     ];
@@ -53,14 +48,10 @@ class MediaManager extends Extension
      *
      * @param string $path
      */
-    public function __construct($path = '/')
+    public function __construct(string $path = '/')
     {
         $this->path = $path;
 
-        if (!empty(config('admin.extensions.media-manager.allowed_ext'))) {
-            $this->allowed = explode(',', config('admin.extensions.media-manager.allowed_ext'));
-        }
-
         $this->initStorage();
     }
 
@@ -70,12 +61,12 @@ private function initStorage()
 
         $this->storage = Storage::disk($disk);
 
-        if (!$this->storage->getDriver()->getAdapter() instanceof Local) {
+        if (!$this->storage->getAdapter() instanceof LocalFilesystemAdapter) {
             Handler::error('Error', '[laravel-admin-ext/media-manager] only works for local storage.');
         }
     }
 
-    public function ls()
+    public function ls(): array
     {
         if (!$this->exists()) {
             Handler::error('Error', "File or directory [$this->path] not exists");
@@ -88,48 +79,23 @@ public function ls()
         $directories = $this->storage->directories($this->path);
 
         return $this->formatDirectories($directories)
-                ->merge($this->formatFiles($files))
-                ->sort(function ($item) {
-                    return $item['name'];
-                })->all();
-    }
-
-    /**
-     * Get full path for a giving fiel path.
-     *
-     * @param string $path
-     *
-     * @return string
-     */
-    protected function getFullPath($path)
-    {
-        $fullPath = $this->storage->getDriver()->getAdapter()->applyPathPrefix($path);
-        if (strstr($fullPath, '..')) {
-            throw new \Exception('Incorrect path');
-        }
-
-        return $fullPath;
+            ->merge($this->formatFiles($files))
+            ->sort(function ($item) {
+                return $item['name'];
+            })->all();
     }
 
     public function download()
     {
-        $fullPath = $this->getFullPath($this->path);
-
-        if (File::isFile($fullPath)) {
-            return response()->download($fullPath);
-        }
-
-        return response('', 404);
+        $this->storage->download($this->path);
     }
 
-    public function delete($path)
+    public function delete($path): bool
     {
         $paths = is_array($path) ? $path : func_get_args();
 
         foreach ($paths as $path) {
-            $fullPath = $this->getFullPath($path);
-
-            if (is_file($fullPath)) {
+            if ($this->storage->fileExists($path)) {
                 $this->storage->delete($path);
             } else {
                 $this->storage->deleteDirectory($path);
@@ -139,107 +105,94 @@ public function delete($path)
         return true;
     }
 
-    public function move($new)
+    public function move($new): bool
     {
-        $ext = pathinfo($new, PATHINFO_EXTENSION);
-        if ($this->allowed && !in_array($ext, $this->allowed)) {
-            throw new \Exception('File extension '.$ext.' is not allowed');
-        }
-
         return $this->storage->move($this->path, $new);
     }
 
     /**
      * @param UploadedFile[] $files
-     * @param string         $dir
-     *
      * @return mixed
      */
-    public function upload($files = [])
+    public function upload(array $files = [])
     {
         foreach ($files as $file) {
-            if ($this->allowed && !in_array($file->getClientOriginalExtension(), $this->allowed)) {
-                throw new \Exception('File extension '.$file->getClientOriginalExtension().' is not allowed');
-            }
-
             $this->storage->putFileAs($this->path, $file, $file->getClientOriginalName());
         }
 
         return true;
     }
 
-    public function newFolder($name)
+    public function newFolder($name): bool
     {
-        $path = rtrim($this->path, '/').'/'.trim($name, '/');
+        $path = rtrim($this->path, '/') . '/' . trim($name, '/');
 
         return $this->storage->makeDirectory($path);
     }
 
-    public function exists()
+    public function exists(): bool
     {
-        $path = $this->getFullPath($this->path);
-
-        return file_exists($path);
+        return $this->storage->exists($this->path);
     }
 
     /**
      * @return array
      */
-    public function urls()
+    public function urls(): array
     {
         return [
-            'path'       => $this->path,
-            'index'      => route('media-index'),
-            'move'       => route('media-move'),
-            'delete'     => route('media-delete'),
-            'upload'     => route('media-upload'),
+            'path' => $this->path,
+            'index' => route('media-index'),
+            'move' => route('media-move'),
+            'delete' => route('media-delete'),
+            'upload' => route('media-upload'),
             'new-folder' => route('media-new-folder'),
         ];
     }
 
-    public function formatFiles($files = [])
+    public function formatFiles($files = []): Collection
     {
         $files = array_map(function ($file) {
             return [
-                'download'  => route('media-download', compact('file')),
-                'icon'      => '',
-                'name'      => $file,
-                'preview'   => $this->getFilePreview($file),
-                'isDir'     => false,
-                'size'      => $this->getFilesize($file),
-                'link'      => route('media-download', compact('file')),
-                'url'       => $this->storage->url($file),
-                'time'      => $this->getFileChangeTime($file),
+                'download' => route('media-download', compact('file')),
+                'icon' => '',
+                'name' => $file,
+                'preview' => $this->getFilePreview($file),
+                'isDir' => false,
+                'size' => $this->getFilesize($file),
+                'link' => route('media-download', compact('file')),
+                'url' => $this->storage->url($file),
+                'time' => $this->getFileChangeTime($file),
             ];
         }, $files);
 
         return collect($files);
     }
 
-    public function formatDirectories($dirs = [])
+    public function formatDirectories($dirs = []): Collection
     {
         $url = route('media-index', ['path' => '__path__', 'view' => request('view')]);
 
-        $preview = "<a href=\"$url\"><span class=\"file-icon text-aqua\"><i class=\"fa fa-folder\"></i></span></a>";
+        $preview = "<a href=\"$url\"><span class=\"file-icon text-aqua\"><i class=\"far fa-folder\"></i></span></a>";
 
         $dirs = array_map(function ($dir) use ($preview) {
             return [
-                'download'  => '',
-                'icon'      => '',
-                'name'      => $dir,
-                'preview'   => str_replace('__path__', $dir, $preview),
-                'isDir'     => true,
-                'size'      => '',
-                'link'      => route('media-index', ['path' => '/'.trim($dir, '/'), 'view' => request('view')]),
-                'url'       => $this->storage->url($dir),
-                'time'      => $this->getFileChangeTime($dir),
+                'download' => '',
+                'icon' => '',
+                'name' => $dir,
+                'preview' => str_replace('__path__', $dir, $preview),
+                'isDir' => true,
+                'size' => '',
+                'link' => route('media-index', ['path' => '/' . trim($dir, '/'), 'view' => request('view')]),
+                'url' => $this->storage->url($dir),
+                'time' => $this->getFileChangeTime($dir),
             ];
         }, $dirs);
 
         return collect($dirs);
     }
 
-    public function navigation()
+    public function navigation(): array
     {
         $folders = explode('/', $this->path);
 
@@ -250,60 +203,60 @@ public function navigation()
         $navigation = [];
 
         foreach ($folders as $folder) {
-            $path = rtrim($path, '/').'/'.$folder;
+            $path = rtrim($path, '/') . '/' . $folder;
 
             $navigation[] = [
-                'name'  => $folder,
-                'url'   => route('media-index', ['path' => $path]),
+                'name' => $folder,
+                'url' => route('media-index', ['path' => $path]),
             ];
         }
 
         return $navigation;
     }
 
-    public function getFilePreview($file)
+    public function getFilePreview($file): string
     {
         switch ($this->detectFileType($file)) {
             case 'image':
 
-                if ($this->storage->getDriver()->getConfig()->has('url')) {
+                if ($this->storage->getConfig()['url']) {
                     $url = $this->storage->url($file);
                     $preview = "<span class=\"file-icon has-img\"><img src=\"$url\" alt=\"Attachment\"></span>";
                 } else {
-                    $preview = '<span class="file-icon"><i class="fa fa-file-image-o"></i></span>';
+                    $preview = '<span class="file-icon"><i class="far fa-image"></i></span>';
                 }
                 break;
 
             case 'pdf':
-                $preview = '<span class="file-icon"><i class="fa fa-file-pdf-o"></i></span>';
+                $preview = '<span class="file-icon"><i class="far fa-file-pdf"></i></span>';
                 break;
 
             case 'zip':
-                $preview = '<span class="file-icon"><i class="fa fa-file-zip-o"></i></span>';
+                $preview = '<span class="file-icon"><i class="far fa-file-archive"></i></span>';
                 break;
 
             case 'word':
-                $preview = '<span class="file-icon"><i class="fa fa-file-word-o"></i></span>';
+                $preview = '<span class="file-icon"><i class="far fa-file-word"></i></span>';
                 break;
 
             case 'ppt':
-                $preview = '<span class="file-icon"><i class="fa fa-file-powerpoint-o"></i></span>';
+                $preview = '<span class="file-icon"><i class="far fa-file-powerpoint"></i></span>';
                 break;
 
             case 'xls':
-                $preview = '<span class="file-icon"><i class="fa fa-file-excel-o"></i></span>';
+                $preview = '<span class="file-icon"><i class="far fa-file-excel"></i></span>';
                 break;
 
             case 'txt':
-                $preview = '<span class="file-icon"><i class="fa fa-file-text-o"></i></span>';
+                $preview = '<span class="file-icon"><i class="far fa-file-text"></i></span>';
                 break;
 
             case 'code':
-                $preview = '<span class="file-icon"><i class="fa fa-code"></i></span>';
+                $preview = '<span class="file-icon"><i class="far fa-file-code"></i></span>';
                 break;
 
             default:
-                $preview = '<span class="file-icon"><i class="fa fa-file"></i></span>';
+                $preview = '<span class="file-icon"><i class="far fa-file"></i></span>';
         }
 
         return $preview;
@@ -322,9 +275,9 @@ protected function detectFileType($file)
         return false;
     }
 
-    public function getFilesize($file)
+    public function getFilesize($file): string
     {
-        $bytes = filesize($this->getFullPath($file));
+        $bytes = $this->storage->size($file);
 
         $units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];
 
@@ -332,13 +285,13 @@ public function getFilesize($file)
             $bytes /= 1024;
         }
 
-        return round($bytes, 2).' '.$units[$i];
+        return round($bytes, 2) . ' ' . $units[$i];
     }
 
-    public function getFileChangeTime($file)
+    public function getFileChangeTime(string $file): string
     {
-        $time = filectime($this->getFullPath($file));
+        $time = $this->storage->lastModified($file);
 
         return date('Y-m-d H:i:s', $time);
     }
-}
+}
\ No newline at end of file
